name: Prebuild

on:
  push:

env:
  NAPI_VERSION: 8
  BINDING_NAME: porla_libtorrent

jobs:
  build:
    name: Build ${{ matrix.arch }} on ${{ matrix.os }} ${{ matrix.libc }}
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: true
      matrix:
        include:
          # macos
          - os: macos-11
            arch: arm64
            triplet: arm64-osx-release

          # linux
          - os: ubuntu-20.04
            arch: x64
            triplet: x64-linux-release

          # linux-musl
          - os: ubuntu-20.04
            arch: x64
            triplet: x64-linux-release
            docker-arch: linux/amd64
            docker-image: node:16-alpine3.16
            libc: musl

          # windows
          - os: windows-2019
            arch: x64
            triplet: x64-windows-static-md-release

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: 'recursive'

      - name: Install Linux dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y linux-headers-$(uname -r)

      - name: Use Node.js 16.x
        uses: actions/setup-node@v1
        with:
          node-version: 16.x

      - name: Rebuild
        if: ${{ !matrix.docker-arch }}
        shell: bash
        run: |
          yarn
          yarn compile --arch=${{ matrix.arch }} --CDVCPKG_TARGET_TRIPLET=${{ matrix.triplet }}
          yarn pkg-prebuilds-copy --source build/Release/$BINDING_NAME.node --name=$BINDING_NAME --strip  --napi_version=$NAPI_VERSION --arch=${{ matrix.arch }}
        env:
          npm_config_build_from_source: true

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        if: matrix.docker-arch

      - name: Rebuild (in Docker)
        uses: addnab/docker-run-action@v3
        if: matrix.docker-arch
        with:
          image: ${{ matrix.docker-image }}
          # shell: bash
          options: --platform=${{ matrix.docker-arch }} -v ${{ github.workspace }}:/work -e CI=1 -e npm_config_build_from_source=1 -e NAPI_VERSION -e BINDING_NAME
          run: |
            if command -v apt-get &> /dev/null
            then
              apt-get update
              apt-get install -y build-essential cmake curl ninja-build zip unzip tar
            elif command -v apk &> /dev/null
            then
              apk update
              apk add --no-cache build-base cmake ninja zip unzip curl perl linux-headers pkgconfig git
              export VCPKG_FORCE_SYSTEM_BINARIES=1
            fi

            cd /work

            yarn
            yarn compile --arch=${{ matrix.arch }} --CDVCPKG_TARGET_TRIPLET=${{ matrix.triplet }}
            yarn pkg-prebuilds-copy --source build/Release/$BINDING_NAME.node --name=$BINDING_NAME --strip --napi_version=$NAPI_VERSION --arch=${{ matrix.arch }} --libc=${{ matrix.libc }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ runner.os }}-${{ matrix.arch }}-${{ matrix.libc }}-prebuilds
          path: prebuilds
          retention-days: 1

  bundle:
    name: Bundle prebuilds
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v3
        with:
          path: tmp

      - name: Display structure of downloaded files
        run: |
          mkdir prebuilds
          mv tmp/*/* prebuilds/

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: all-prebuilds
          path: prebuilds
          retention-days: 7
